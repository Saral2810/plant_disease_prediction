import streamlit as st
import numpy as np
import cv2
import time
from tensorflow.keras.models import load_model

# Load the trained model
model = load_model("plant_disease_model.h5")

# Class labels for plant diseases
CLASS_NAMES = ['Tomato-Bacterial_spot', 'Potato-Barly_blight', 'Corn-Common_rust', 'Apple-Apple_scab', 
            'Apple-Black_rot', 'Apple-Cedar_apple_rust', 'Apple-healthy', 'Blueberry-healthy', 
            'Cherry-Powdery_mildew', 'Cherry-healthy', 'Corn-Gray_leaf_spot', 'Corn-Common_rust', 
            'Corn-Leaf_Blight', 'Corn-healthy', 'Grape-Black_rot', 'Grape-Esca', 'Grape-Leaf_blight', 
            'Grape-healthy', 'Orange-Citrus_greening', 'Peach-Bacterial_spot', 'Peach-healthy', 
            'Pepper-Bacterial_spot', 'Pepper-healthy', 'Potato-Early_blight', 'Potato-Late_blight', 
            'Potato-healthy', 'Raspberry-healthy', 'Soybean-healthy', 'Squash-Powdery_mildew', 
            'Strawberry-Leaf_scorch', 'Strawberry-healthy', 'Tomato-Bacterial_spot', 'Tomato-Early_blight', 
            'Tomato-Late_blight', 'Tomato-Leaf_Mold', 'Tomato-Septoria_leaf_spot', 'Tomato-Spider_mites', 
            'Tomato-Target_Spot', 'Tomato-Yellow_Leaf_Curl_Virus', 'Tomato-mosaic_virus', 'Tomato-healthy']

# Language translations with all major Indian languages
TRANSLATIONS = {
    "en": {
        "title": "ЁЯМ▒ PLANT DISEASE RECOGNITION SYSTEM",
        "home_title": "AI-Powered Plant Disease Detection",
        "welcome": "Welcome!",
        "description": "This system helps identify plant diseases using **AI-powered image analysis**.",
        "how_it_works": "### How It Works:",
        "step1": "1. **Upload an Image**: Go to the Disease Recognition page.",
        "step2": "2. **AI Processing**: The model detects potential diseases.",
        "step3": "3. **Results**: Get accurate disease predictions instantly!",
        "start": "ЁЯСЙ *Start by clicking on the Disease Recognition tab!*",
        "about_title": "ЁЯУЬ About This Project",
        "developed_by": "Developed by:",
        "team": "\n- **Saral Singhal**\n- **Aditi Shindadkar**\n- **Om Raj**\n- **Tarpita Karnam**\n- **Pranjal Karan**",
        "recognition_title": "ЁЯФм Disease Recognition",
        "upload_text": "ЁЯУ╕ Upload a Plant Leaf Image:",
        "predict_button": "ЁЯФН Predict Disease",
        "analyzing": "ЁЯФД Analyzing Image...",
        "result_disease": "тЬЕ Disease Detected:",
        "result_plant": "ЁЯНГ Plant Type:",
        "select_page": "Select Page",
        "home": "Home",
        "about": "About",
        "disease_recognition": "Disease Recognition"
    },
    "hi": {
        "title": "ЁЯМ▒ рдкреМрдз рд░реЛрдЧ рдкрд╣рдЪрд╛рди рдкреНрд░рдгрд╛рд▓реА",
        "home_title": "рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рдкреМрдз рд░реЛрдЧ рдкрд╣рдЪрд╛рди",
        "welcome": "рд╕реНрд╡рд╛рдЧрдд рд╣реИ!",
        "description": "рдпрд╣ рдкреНрд░рдгрд╛рд▓реА **рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЫрд╡рд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг** рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдкреМрдзреЛрдВ рдХреЗ рд░реЛрдЧреЛрдВ рдХреА рдкрд╣рдЪрд╛рди рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддреА рд╣реИред",
        "how_it_works": "### рдпрд╣ рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ:",
        "step1": "1. **рдПрдХ рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ**: рд░реЛрдЧ рдкрд╣рдЪрд╛рди рдкреГрд╖реНрда рдкрд░ рдЬрд╛рдПрдВред",
        "step2": "2. **рдПрдЖрдИ рдкреНрд░рд╕рдВрд╕реНрдХрд░рдг**: рдореЙрдбрд▓ рд╕рдВрднрд╛рд╡рд┐рдд рд░реЛрдЧреЛрдВ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рддрд╛ рд╣реИред",
        "step3": "3. **рдкрд░рд┐рдгрд╛рдо**: рддреБрд░рдВрдд рд╕рдЯреАрдХ рд░реЛрдЧ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгрд┐рдпрд╛рдВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ!",
        "start": "ЁЯСЙ *рд░реЛрдЧ рдкрд╣рдЪрд╛рди рдЯреИрдм рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдХреЗ рд╢реБрд░реВ рдХрд░реЗрдВ!*",
        "about_title": "ЁЯУЬ рдЗрд╕ рдкрд░рд┐рдпреЛрдЬрдирд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ",
        "developed_by": "рджреНрд╡рд╛рд░рд╛ рд╡рд┐рдХрд╕рд┐рдд:",
        "team": "- **рд╕рд░рд▓ рд╕рд┐рдВрдШрд▓**\n- **рдЕрджрд┐рддрд┐ рд╢рд┐рдВрджрд╛рдбрдХрд░**\n- **рдУрдо рд░рд╛рдЬ**\n- **рддрд░реНрдкрд┐рддрд╛ рдХрд░реНрдгрдо**\n- **рдкреНрд░рд╛рдВрдЬрд▓ рдХрд░рдг**",
        "recognition_title": "ЁЯФм рд░реЛрдЧ рдкрд╣рдЪрд╛рди",
        "upload_text": "ЁЯУ╕ рдПрдХ рдкреМрдзреЗ рдХреА рдкрддреНрддреА рдХреА рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ:",
        "predict_button": "ЁЯФН рд░реЛрдЧ рдХреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХрд░реЗрдВ",
        "analyzing": "ЁЯФД рдЫрд╡рд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг...",
        "result_disease": "тЬЕ рд░реЛрдЧ рдХрд╛ рдкрддрд╛ рдЪрд▓рд╛:",
        "result_plant": "ЁЯНГ рдкреМрдзреЗ рдХрд╛ рдкреНрд░рдХрд╛рд░:",
        "select_page": "рдкреГрд╖реНрда рдЪреБрдиреЗрдВ",
        "home": "рд╣реЛрдо",
        "about": "рдЬрд╛рдирдХрд╛рд░реА",
        "disease_recognition": "рд░реЛрдЧ рдкрд╣рдЪрд╛рди"
    },
    "bn": {  # Bengali
        "title": "ЁЯМ▒ ржЙржжрзНржнрж┐ржж рж░рзЛржЧ ржЪрж┐ржирзНрж╣рж┐рждржХрж░ржг ржмрзНржпржмрж╕рзНржерж╛",
        "home_title": "ржПржЖржЗ-ржЪрж╛рж▓рж┐ржд ржЙржжрзНржнрж┐ржж рж░рзЛржЧ рж╕ржирж╛ржХрзНрждржХрж░ржг",
        "welcome": "рж╕рзНржмрж╛ржЧрждржо!",
        "description": "ржПржЗ рж╕рж┐рж╕рзНржЯрзЗржоржЯрж┐ **ржПржЖржЗ-ржЪрж╛рж▓рж┐ржд ржЗржорзЗржЬ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг** ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЙржжрзНржнрж┐ржжрзЗрж░ рж░рзЛржЧ рж╕ржирж╛ржХрзНржд ржХрж░рждрзЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░рзЗред",
        "how_it_works": "### ржПржЯрж┐ ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ:",
        "step1": "1. **ржПржХржЯрж┐ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи**: рж░рзЛржЧ ржЪрж┐ржирзНрж╣рж┐рждржХрж░ржг ржкрзГрж╖рзНржарж╛ржпрж╝ ржпрж╛ржиред",
        "step2": "2. **ржПржЖржЗ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг**: ржоржбрзЗрж▓ рж╕ржорзНржнрж╛ржмрзНржп рж░рзЛржЧ рж╕ржирж╛ржХрзНржд ржХрж░рзЗред",
        "step3": "3. **ржлрж▓рж╛ржлрж▓**: ржЕржмрж┐рж▓ржорзНржмрзЗ рж╕ржарж┐ржХ рж░рзЛржЧрзЗрж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржкрж╛ржи!",
        "start": "ЁЯСЙ *рж░рзЛржЧ ржЪрж┐ржирзНрж╣рж┐рждржХрж░ржг ржЯрзНржпрж╛ржмрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ рж╢рзБрж░рзБ ржХрж░рзБржи!*",
        "about_title": "ЁЯУЬ ржПржЗ ржкрзНрж░ржХрж▓рзНржк рж╕ржорзНржкрж░рзНржХрзЗ",
        "developed_by": "ржжрзНржмрж╛рж░рж╛ ржЙржирзНржиржд:",
        "team": "- **рж╕рж░рж▓ рж╕рж┐ржВрж╣рж▓**\n- **ржЕржжрж┐рждрж┐ рж╢рж┐ржирзНржжрж╛ржбрж╝ржХрж░**\n- **ржУржо рж░рж╛ржЬ**\n- **рждрж░рзНржкрж┐рждрж╛ ржХрж░рзНржгржо**\n- **ржкрзНрж░рж╛ржЮрзНржЬрж▓ ржХрж░ржг**",
        "recognition_title": "ЁЯФм рж░рзЛржЧ ржЪрж┐ржирзНрж╣рж┐рждржХрж░ржг",
        "upload_text": "ЁЯУ╕ ржПржХржЯрж┐ ржЙржжрзНржнрж┐ржж ржкрж╛рждрж╛рж░ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи:",
        "predict_button": "ЁЯФН рж░рзЛржЧрзЗрж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржжрж┐ржи",
        "analyzing": "ЁЯФД ржЫржмрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
        "result_disease": "тЬЕ рж░рзЛржЧ рж╕ржирж╛ржХрзНржд рж╣ржпрж╝рзЗржЫрзЗ:",
        "result_plant": "ЁЯНГ ржЙржжрзНржнрж┐ржжрзЗрж░ ржзрж░ржи:",
        "select_page": "ржкрзГрж╖рзНржарж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        "home": "рж╣рзЛржо",
        "about": "рж╕ржорзНржкрж░рзНржХрзЗ",
        "disease_recognition": "рж░рзЛржЧ ржЪрж┐ржирзНрж╣рж┐рждржХрж░ржг"
    },
    "ta": {  # Tamil
        "title": "ЁЯМ▒ родро╛ро╡ро░ роирпЛропрпН роЕроЩрпНроХрпАроХро╛ро░ роЕроорпИрокрпНрокрпБ",
        "home_title": "AI-роЗропроХрпНроХрокрпНрокроЯрпБроорпН родро╛ро╡ро░ роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН",
        "welcome": "ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН!",
        "description": "роЗроирпНрод роЕроорпИрокрпНрокрпБ **AI-роЗропроХрпНроХрокрпНрокроЯрпБроорпН рокроЯ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ** рокропройрпНрокроЯрпБродрпНродро┐ родро╛ро╡ро░ роирпЛропрпНроХро│рпИ роЕроЯрпИропро╛ро│роорпН роХро╛рог роЙродро╡рпБроХро┐ро▒родрпБ.",
        "how_it_works": "### роЗродрпБ роОро╡рпНро╡ро╛ро▒рпБ роЪрпЖропро▓рпНрокроЯрпБроХро┐ро▒родрпБ:",
        "step1": "1. **рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН**: роирпЛропрпН роЕроЩрпНроХрпАроХро╛ро░ рокроХрпНроХродрпНродро┐ро▒рпНроХрпБроЪрпН роЪрпЖро▓рпНро▓ро╡рпБроорпН.",
        "step2": "2. **AI роЪрпЖропро▓ро╛роХрпНроХроорпН**: рооро╛родро┐ро░ро┐ роЪро╛родрпНродро┐ропрооро╛рой роирпЛропрпНроХро│рпИ роХрогрпНроЯро▒ро┐ропрпБроорпН.",
        "step3": "3. **роорпБроЯро┐ро╡рпБроХро│рпН**: родрпБро▓рпНро▓ро┐ропрооро╛рой роирпЛропрпН роХрогро┐рокрпНрокрпБроХро│рпИ роЙроЯройроЯро┐ропро╛роХрокрпН рокрпЖро▒ро╡рпБроорпН!",
        "start": "ЁЯСЙ *роирпЛропрпН роЕроЩрпНроХрпАроХро╛ро░ родро╛ро╡ро▓рпИроХрпН роХро┐ро│ро┐роХрпН роЪрпЖропрпНро╡родройрпН роорпВро▓роорпН родрпКроЯроЩрпНроХро╡рпБроорпН!*",
        "about_title": "ЁЯУЬ роЗроирпНрод родро┐роЯрпНроЯроорпН рокро▒рпНро▒ро┐",
        "developed_by": "роорпВро▓роорпН роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ:",
        "team": "- **роЪро░ро▓рпН роЪро┐роЩрпНро▓рпН**\n- **роЕродро┐родро┐ ро╖ро┐рогрпНроЯро╛роЯрпНроХро░рпН**\n- **роУроорпН ро░ро╛роЬрпН**\n- **родро╛ро░рпНрокро┐родро╛ роХро░рпНрогроорпН**\n- **рокро┐ро░ро╛роЮрпНроЪро▓рпН роХро░рогрпН**",
        "recognition_title": "ЁЯФм роирпЛропрпН роЕроЩрпНроХрпАроХро╛ро░роорпН",
        "upload_text": "ЁЯУ╕ роТро░рпБ родро╛ро╡ро░ роЗро▓рпИ рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН:",
        "predict_button": "ЁЯФН роирпЛропрпИ роХрогро┐роХрпНроХро╡рпБроорпН",
        "analyzing": "ЁЯФД рокроЯродрпНродрпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНроХро┐ро▒родрпБ...",
        "result_disease": "тЬЕ роирпЛропрпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ:",
        "result_plant": "ЁЯНГ родро╛ро╡ро░ ро╡роХрпИ:",
        "select_page": "рокроХрпНроХродрпНродрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        "home": "роорпБроХрокрпНрокрпБ",
        "about": "рокро▒рпНро▒ро┐",
        "disease_recognition": "роирпЛропрпН роЕроЩрпНроХрпАроХро╛ро░роорпН"
    },
    "te": {  # Telugu
        "title": "ЁЯМ▒ р░ор▒Кр░Хр▒Нр░Хр░▓ р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б р░╡р▒Нр░пр░╡р░╕р▒Нр░е",
        "home_title": "AI-р░╢р░Хр▒Нр░др░┐р░др▒Л р░ор▒Кр░Хр▒Нр░Хр░▓ р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б",
        "welcome": "р░╕р▒Нр░╡р░╛р░Чр░др░В!",
        "description": "р░И р░╡р▒Нр░пр░╡р░╕р▒Нр░е **AI-р░╢р░Хр▒Нр░др░┐р░др▒Л р░Зр░ор▒Зр░Ьр▒Н р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г** р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░┐ р░ор▒Кр░Хр▒Нр░Хр░▓ р░╡р▒Нр░пр░╛р░зр▒Бр░▓р░ир▒Б р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░бр░Вр░▓р▒Л р░╕р░╣р░╛р░пр░кр░бр▒Бр░др▒Бр░Вр░жр░┐.",
        "how_it_works": "### р░Зр░жр░┐ р░Ор░▓р░╛ р░кр░ир░┐ р░Ър▒Зр░╕р▒Нр░др▒Бр░Вр░жр░┐:",
        "step1": "1. **р░Тр░Х р░Зр░ор▒Зр░Ьр▒Н р░Ер░кр▒Нр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐**: р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б р░кр▒Зр░Ьр▒Ар░Хр░┐ р░╡р▒Жр░│р▒Нр░▓р░Вр░бр░┐.",
        "step2": "2. **AI р░кр▒Нр░░р░╛р░╕р▒Жр░╕р░┐р░Вр░Чр▒Н**: р░ор▒Лр░бр░▓р▒Н р░╕р░Вр░нр░╛р░╡р▒Нр░п р░╡р▒Нр░пр░╛р░зр▒Бр░▓р░ир▒Б р░Чр▒Бр░░р▒Нр░др░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐.",
        "step3": "3. **р░лр░▓р░┐р░др░╛р░▓р▒Б**: р░Цр░Ър▒Нр░Ър░┐р░др░ор▒Ир░и р░╡р▒Нр░пр░╛р░зр░┐ р░Ер░Вр░Ър░ир░╛р░▓р░ир▒Б р░др░Хр▒Нр░╖р░гр░ор▒З р░кр▒Кр░Вр░жр░Вр░бр░┐!",
        "start": "ЁЯСЙ *р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б р░Яр▒Нр░пр░╛р░мр▒Н р░кр▒И р░Хр▒Нр░▓р░┐р░Хр▒Н р░Ър▒Зр░пр░бр░В р░жр▒Нр░╡р░╛р░░р░╛ р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐!*",
        "about_title": "ЁЯУЬ р░И р░кр▒Нр░░р░╛р░Ьр▒Жр░Хр▒Нр░Яр▒Н р░Чр▒Бр░░р░┐р░Вр░Ър░┐",
        "developed_by": "р░жр▒Нр░╡р░╛р░░р░╛ р░Ер░нр░┐р░╡р▒Гр░жр▒Нр░зр░┐ р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐:",
        "team": "- **р░╕р░░р░▓р▒Н р░╕р░┐р░Вр░Шр░▓р▒Н**\n- **р░Ер░жр░┐р░др░┐ р░╖р░┐р░Вр░бр░╛р░бр▒Нр░Хр░░р▒Н**\n- **р░Ур░В р░░р░╛р░Ьр▒Н**\n- **р░др░░р▒Нр░кр░┐р░д р░Хр░░р▒Нр░ир░В**\n- **р░кр▒Нр░░р░╛р░Вр░Ьр░▓р▒Н р░Хр░░р░гр▒Н**",
        "recognition_title": "ЁЯФм р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б",
        "upload_text": "ЁЯУ╕ р░Тр░Х р░ор▒Кр░Хр▒Нр░Х р░Жр░Хр▒Б р░Зр░ор▒Зр░Ьр▒Н р░Ер░кр▒Нр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐:",
        "predict_button": "ЁЯФН р░╡р▒Нр░пр░╛р░зр░┐р░ир░┐ р░Ер░Вр░Ър░ир░╛ р░╡р▒Зр░пр░Вр░бр░┐",
        "analyzing": "ЁЯФД р░Зр░ор▒Зр░Ьр▒Н р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...",
        "result_disease": "тЬЕ р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐:",
        "result_plant": "ЁЯНГ р░ор▒Кр░Хр▒Нр░Х р░░р░Хр░В:",
        "select_page": "р░кр▒Зр░Ьр▒Ар░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "home": "р░╣р▒Лр░ор▒Н",
        "about": "р░Чр▒Бр░░р░┐р░Вр░Ър░┐",
        "disease_recognition": "р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б"
    },
    "mr": {  # Marathi
        "title": "ЁЯМ▒ рд╡рдирд╕реНрдкрддреА рд░реЛрдЧ рдУрд│рдЦ рдкреНрд░рдгрд╛рд▓реА",
        "home_title": "AI-рдЪрд╛рд▓рд┐рдд рд╡рдирд╕реНрдкрддреА рд░реЛрдЧ рдУрд│рдЦ",
        "welcome": "рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ!",
        "description": "рд╣реА рдкреНрд░рдгрд╛рд▓реА **AI-рдЪрд╛рд▓рд┐рдд рдкреНрд░рддрд┐рдорд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг** рд╡рд╛рдкрд░реВрди рд╡рдирд╕реНрдкрддреАрдВрдЪреНрдпрд╛ рд░реЛрдЧрд╛рдВрдЪреА рдУрд│рдЦ рдХрд░рдгреНрдпрд╛рд╕ рдорджрдд рдХрд░рддреЗ.",
        "how_it_works": "### рд╣реЗ рдХрд╕реЗ рдХрд╛рдо рдХрд░рддреЗ:",
        "step1": "1. **рдПрдХ рдкреНрд░рддрд┐рдорд╛ рдЕрдкрд▓реЛрдб рдХрд░рд╛**: рд░реЛрдЧ рдУрд│рдЦ рдкреГрд╖реНрдард╛рд╡рд░ рдЬрд╛.",
        "step2": "2. **AI рдкреНрд░рдХреНрд░рд┐рдпрд╛**: рдореЙрдбреЗрд▓ рд╕рдВрднрд╛рд╡реНрдп рд░реЛрдЧ рдУрд│рдЦрддреЗ.",
        "step3": "3. **рдирд┐рдХрд╛рд▓**: рдЕрдЪреВрдХ рд░реЛрдЧ рдЕрдВрджрд╛рдЬ рддреНрд╡рд░рд┐рдд рдорд┐рд│рд╡рд╛!",
        "start": "ЁЯСЙ *рд░реЛрдЧ рдУрд│рдЦ рдЯреЕрдм рд╡рд░ рдХреНрд▓рд┐рдХ рдХрд░реВрди рдкреНрд░рд╛рд░рдВрдн рдХрд░рд╛!*",
        "about_title": "ЁЯУЬ рдпрд╛ рдкреНрд░рдХрд▓реНрдкрд╛рдмрджреНрджрд▓",
        "developed_by": "рджреНрд╡рд╛рд░рд╛ рд╡рд┐рдХрд╕рд┐рдд:",
        "team": "- **рд╕рд░рд▓ рд╕рд┐рдВрдЧрд▓**\n- **рдЕрджрд┐рддреА рд╢рд┐рдВрджрд╛рдбрдХрд░**\n- **рдУрдо рд░рд╛рдЬ**\n- **рддрд░реНрдкрд┐рддрд╛ рдХрд░реНрдгрдо**\n- **рдкреНрд░рд╛рдВрдЬрд▓ рдХрд░рдг**",
        "recognition_title": "ЁЯФм рд░реЛрдЧ рдУрд│рдЦ",
        "upload_text": "ЁЯУ╕ рдПрдХ рд╡рдирд╕реНрдкрддреА рдкрд╛рдирд╛рдЪреА рдкреНрд░рддрд┐рдорд╛ рдЕрдкрд▓реЛрдб рдХрд░рд╛:",
        "predict_button": "ЁЯФН рд░реЛрдЧрд╛рдЪрд╛ рдЕрдВрджрд╛рдЬ рд▓рд╛рд╡рд╛",
        "analyzing": "ЁЯФД рдкреНрд░рддрд┐рдореЗрдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдд рдЖрд╣реЗ...",
        "result_disease": "тЬЕ рд░реЛрдЧ рдУрд│рдЦрд▓рд╛ рдЧреЗрд▓рд╛:",
        "result_plant": "ЁЯНГ рд╡рдирд╕реНрдкрддреА рдкреНрд░рдХрд╛рд░:",
        "select_page": "рдкреГрд╖реНрда рдирд┐рд╡рдбрд╛",
        "home": "рдореБрдЦреНрдпрдкреГрд╖реНрда",
        "about": "рд╡рд┐рд╖рдпреА",
        "disease_recognition": "рд░реЛрдЧ рдУрд│рдЦ"
    },
    "gu": {  # Gujarati
        "title": "ЁЯМ▒ ркЫрлЛркб рк░рлЛркЧ ркУрк│ркЦ рк╕рк┐рк╕рлНркЯрко",
        "home_title": "AI-рк╕ркХрлНрк╖рко ркЫрлЛркб рк░рлЛркЧ рк╢рлЛркз",
        "welcome": "рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ!",
        "description": "ркЖ рк╕рк┐рк╕рлНркЯрко **AI-рк╕ркХрлНрк╖рко ркЗркорлЗркЬ рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг** ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлАркирлЗ ркЫрлЛркбркирк╛ рк░рлЛркЧрлЛркирлЗ ркУрк│ркЦрк╡рк╛ркорк╛ркВ ркоркжркж ркХрк░рлЗ ркЫрлЗ.",
        "how_it_works": "### ркдрлЗ ркХрлЗрк╡рлА рк░рлАркдрлЗ ркХрк╛рко ркХрк░рлЗ ркЫрлЗ:",
        "step1": "1. **ркПркХ ркЗркорлЗркЬ ркЕрккрк▓рлЛркб ркХрк░рлЛ**: рк░рлЛркЧ ркУрк│ркЦ рккрлГрк╖рлНрка рккрк░ ркЬрк╛ркУ.",
        "step2": "2. **AI рккрлНрк░ркХрлНрк░рк┐ркпрк╛**: ркорлЛркбрлЗрк▓ рк╕ркВркнрк╡рк┐ркд рк░рлЛркЧрлЛркирлЗ ркУрк│ркЦрлЗ ркЫрлЗ.",
        "step3": "3. **рккрк░рк┐ркгрк╛ркорлЛ**: ркЪрлЛркХрлНркХрк╕ рк░рлЛркЧ ркЖркЧрк╛рк╣рлАркУ ркдрк░ркд ркЬ ркорлЗрк│рк╡рлЛ!",
        "start": "ЁЯСЙ *рк░рлЛркЧ ркУрк│ркЦ ркЯрлЕркм рккрк░ ркХрлНрк▓рк┐ркХ ркХрк░рлАркирлЗ рк╢рк░рлВ ркХрк░рлЛ!*",
        "about_title": "ЁЯУЬ ркЖ рккрлНрк░рлЛркЬрлЗркХрлНркЯ рк╡рк┐рк╢рлЗ",
        "developed_by": "ркжрлНрк╡рк╛рк░рк╛ рк╡рк┐ркХрк╕рк┐ркд:",
        "team": "- **рк╕рк░рк▓ рк╕рк┐ркВркШрк▓**\n- **ркЕркжрк┐ркдрк┐ рк╢рк┐ркВркбрк╛ркбркХрк░**\n- **ркУрко рк░рк╛ркЬ**\n- **ркдрк░рлНрккрк┐ркдрк╛ ркХрк░рлНркгрко**\n- **рккрлНрк░рк╛ркВркЬрк▓ ркХрк░ркг**",
        "recognition_title": "ЁЯФм рк░рлЛркЧ ркУрк│ркЦ",
        "upload_text": "ЁЯУ╕ ркПркХ ркЫрлЛркб рккрк╛ркВркжркбрк╛ркирлА ркЗркорлЗркЬ ркЕрккрк▓рлЛркб ркХрк░рлЛ:",
        "predict_button": "ЁЯФН рк░рлЛркЧркирлА ркЖркЧрк╛рк╣рлА ркХрк░рлЛ",
        "analyzing": "ЁЯФД ркЗркорлЗркЬркирлБркВ рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг ркХрк░рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ...",
        "result_disease": "тЬЕ рк░рлЛркЧ рк╢рлЛркзрлА ркХрк╛ркврлНркпрлЛ:",
        "result_plant": "ЁЯНГ ркЫрлЛркб рккрлНрк░ркХрк╛рк░:",
        "select_page": "рккрлГрк╖рлНрка рккрк╕ркВркж ркХрк░рлЛ",
        "home": "рк╣рлЛрко",
        "about": "рк╡рк┐рк╢рлЗ",
        "disease_recognition": "рк░рлЛркЧ ркУрк│ркЦ"
    },
    "kn": {  # Kannada
        "title": "ЁЯМ▒ р▓╕р▓╕р│Нр▓п р▓░р│Лр▓Ч р▓Чр│Бр▓░р│Бр▓др▓┐р▓╕р│Бр▓╡ р▓╡р│Нр▓пр▓╡р▓╕р│Нр▓ер│Ж",
        "home_title": "AI-р▓Ър▓╛р▓▓р▓┐р▓д р▓╕р▓╕р│Нр▓п р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Ж",
        "welcome": "р▓╕р│Нр▓╡р▓╛р▓Чр▓д!",
        "description": "р▓И р▓╡р│Нр▓пр▓╡р▓╕р│Нр▓ер│Жр▓пр│Б **AI-р▓Ър▓╛р▓▓р▓┐р▓д р▓Ър▓┐р▓др│Нр▓░ р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Ж** р▓мр▓│р▓╕р▓┐ р▓╕р▓╕р│Нр▓п р▓░р│Лр▓Чр▓Чр▓│р▓ир│Нр▓ир│Б р▓Чр│Бр▓░р│Бр▓др▓┐р▓╕р▓▓р│Б р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр│Бр▓др│Нр▓др▓жр│Ж.",
        "how_it_works": "### р▓Зр▓жр│Б р▓╣р│Зр▓Чр│Ж р▓Хр│Жр▓▓р▓╕ р▓ор▓╛р▓бр│Бр▓др│Нр▓др▓жр│Ж:",
        "step1": "1. **р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓Ер▓кр│Нр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐**: р▓░р│Лр▓Ч р▓Чр│Бр▓░р│Бр▓др▓┐р▓╕р│Бр▓╡ р▓кр│Бр▓Яр▓Хр│Нр▓Хр│Ж р▓╣р│Лр▓Чр▓┐.",
        "step2": "2. **AI р▓╕р▓Вр▓╕р│Нр▓Хр▓░р▓гр│Ж**: р▓ор▓╛р▓жр▓░р▓┐ р▓╕р▓Вр▓нр▓╛р▓╡р│Нр▓п р▓░р│Лр▓Чр▓Чр▓│р▓ир│Нр▓ир│Б р▓Чр│Бр▓░р│Бр▓др▓┐р▓╕р│Бр▓др│Нр▓др▓жр│Ж.",
        "step3": "3. **р▓лр▓▓р▓┐р▓др▓╛р▓Вр▓╢р▓Чр▓│р│Б**: р▓ир▓┐р▓Цр▓░р▓╡р▓╛р▓ж р▓░р│Лр▓Ч р▓Кр▓╣р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓др▓Хр│Нр▓╖р▓г р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐!",
        "start": "ЁЯСЙ *р▓░р│Лр▓Ч р▓Чр│Бр▓░р│Бр▓др▓┐р▓╕р│Бр▓╡ р▓Яр│Нр▓пр▓╛р▓мр│Н р▓Хр│Нр▓▓р▓┐р▓Хр│Н р▓ор▓╛р▓бр│Бр▓╡ р▓ор│Вр▓▓р▓Х р▓кр│Нр▓░р▓╛р▓░р▓Вр▓нр▓┐р▓╕р▓┐!*",
        "about_title": "ЁЯУЬ р▓И р▓пр│Лр▓Ьр▓ир│Жр▓п р▓мр▓Чр│Нр▓Чр│Ж",
        "developed_by": "р▓Ер▓нр▓┐р▓╡р│Гр▓жр│Нр▓зр▓┐р▓кр▓бр▓┐р▓╕р▓┐р▓жр▓╡р▓░р│Б:",
        "team": "- **р▓╕р▓░р▓│р│Н р▓╕р▓┐р▓Вр▓Чр▓▓р│Н**\n- **р▓Ер▓жр▓┐р▓др▓┐ р▓╢р▓┐р▓Вр▓бр▓╛р▓бр│Нр▓Хр▓░р│Н**\n- **р▓Ур▓В р▓░р▓╛р▓Ьр│Н**\n- **р▓др▓░р│Нр▓кр▓┐р▓др▓╛ р▓Хр▓░р│Нр▓гр▓ор│Н**\n- **р▓кр│Нр▓░р▓╛р▓Вр▓Ьр▓▓р│Н р▓Хр▓░р▓гр│Н**",
        "recognition_title": "ЁЯФм р▓░р│Лр▓Ч р▓Чр│Бр▓░р│Бр▓др▓┐р▓╕р│Бр▓╡р▓┐р▓Хр│Ж",
        "upload_text": "ЁЯУ╕ р▓╕р▓╕р│Нр▓пр▓ж р▓Ор▓▓р│Жр▓п р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓Ер▓кр│Нр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐:",
        "predict_button": "ЁЯФН р▓░р│Лр▓Чр▓╡р▓ир│Нр▓ир│Б р▓Кр▓╣р▓┐р▓╕р▓┐",
        "analyzing": "ЁЯФД р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓┐р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
        "result_disease": "тЬЕ р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Жр▓пр▓╛р▓Чр▓┐р▓жр│Ж:",
        "result_plant": "ЁЯНГ р▓╕р▓╕р│Нр▓п р▓кр│Нр▓░р▓Хр▓╛р▓░:",
        "select_page": "р▓кр│Бр▓Яр▓╡р▓ир│Нр▓ир│Б р▓Жр▓░р▓┐р▓╕р▓┐",
        "home": "р▓ор│Бр▓Цр▓кр│Бр▓Я",
        "about": "р▓мр▓Чр│Нр▓Чр│Ж",
        "disease_recognition": "р▓░р│Лр▓Ч р▓Чр│Бр▓░р│Бр▓др▓┐р▓╕р│Бр▓╡р▓┐р▓Хр│Ж"
    },
    "ml": {  # Malayalam
        "title": "ЁЯМ▒ р┤╕р┤╕р╡Нр┤п р┤░р╡Лр┤Ч р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜ р┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤В",
        "home_title": "AI-р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤┐р┤д р┤╕р┤╕р╡Нр┤п р┤░р╡Лр┤Ч р┤бр┤┐р┤▒р╡Нр┤▒р┤Хр╡Нр┤╖р╡╗",
        "welcome": "р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В!",
        "description": "р┤И р┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤В **AI-р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤┐р┤д р┤Зр┤ор╡Зр┤Ьр╡Н р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В** р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Ър╡Нр┤Ър╡Н р┤╕р┤╕р╡Нр┤п р┤░р╡Лр┤Чр┤Щр╡Нр┤Щр╡╛ р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр┤╛р╡╗ р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б.",
        "how_it_works": "### р┤Зр┤др╡Н р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б:",
        "step1": "1. **р┤Тр┤░р╡Б р┤Зр┤ор╡Зр┤Ьр╡Н р┤Ер┤кр╡Нр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х**: р┤░р╡Лр┤Ч р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜ р┤кр╡Зр┤Ьр┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤кр╡Лр┤Хр╡Бр┤Х.",
        "step2": "2. **AI р┤кр╡Нр┤░р╡Лр┤╕р┤╕р╡Нр┤╕р┤┐р┤Вр┤Чр╡Н**: р┤ор╡Лр┤бр╡╜ р┤╕р┤╛р┤зр╡Нр┤пр┤др┤пр╡Бр┤│р╡Нр┤│ р┤░р╡Лр┤Чр┤Щр╡Нр┤Щр╡╛ р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡Бр┤ир╡Нр┤ир╡Б.",
        "step3": "3. **р┤лр┤▓р┤Щр╡Нр┤Щр╡╛**: р┤Хр╡Гр┤др╡Нр┤пр┤ор┤╛р┤п р┤░р╡Лр┤Ч р┤кр╡Нр┤░р┤╡р┤Ър┤ир┤Щр╡Нр┤Щр╡╛ р┤Йр┤Яр┤ир┤Яр┤┐ р┤ир╡Зр┤Яр╡Бр┤Х!",
        "start": "ЁЯСЙ *р┤░р╡Лр┤Ч р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜ р┤Яр┤╛р┤мр╡Н р┤Хр╡Нр┤▓р┤┐р┤Хр╡Нр┤Хр╡Н р┤Ър╡Жр┤пр╡Нр┤др╡Н р┤Жр┤░р┤Вр┤нр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х!*",
        "about_title": "ЁЯУЬ р┤И р┤кр╡Нр┤░р╡Лр┤Ьр┤Хр╡Нр┤▒р╡Нр┤▒р┤┐р┤ир╡Ж р┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н",
        "developed_by": "р┤╡р┤┐р┤Хр┤╕р┤┐р┤кр╡Нр┤кр┤┐р┤Ър╡Нр┤Ър┤др╡Н:",
        "team": "- **р┤╕р┤░р╡╜ р┤╕р┤┐р┤Вр┤Чр╡╜**\n- **р┤Ер┤жр┤┐р┤др┤┐ р┤╖р┤┐р┤гр╡Нр┤Яр┤╛р┤бр╡Нр┤Хр╡╝**\n- **р┤Ур┤В р┤░р┤╛р┤Ьр╡Н**\n- **р┤др╡╝р┤кр╡Нр┤кр┤┐р┤д р┤Хр╡╝р┤гр┤В**\n- **р┤кр╡Нр┤░р┤╛р┤Юр╡Нр┤Ър╡╜ р┤Хр┤░р╡║**",
        "recognition_title": "ЁЯФм р┤░р╡Лр┤Ч р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜",
        "upload_text": "ЁЯУ╕ р┤Тр┤░р╡Б р┤╕р┤╕р╡Нр┤п р┤Зр┤▓ р┤Зр┤ор╡Зр┤Ьр╡Н р┤Ер┤кр╡Нр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х:",
        "predict_button": "ЁЯФН р┤░р╡Лр┤Чр┤В р┤кр╡Нр┤░р┤╡р┤Ър┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "analyzing": "ЁЯФД р┤Зр┤ор╡Зр┤Ьр╡Н р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...",
        "result_disease": "тЬЕ р┤░р╡Лр┤Чр┤В р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤┐:",
        "result_plant": "ЁЯНГ р┤╕р┤╕р╡Нр┤п р┤др┤░р┤В:",
        "select_page": "р┤кр╡Зр┤Ьр╡Н р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х",
        "home": "р┤╣р╡Лр┤В",
        "about": "р┤╡р┤┐р┤╡р┤░р┤гр┤В",
        "disease_recognition": "р┤░р╡Лр┤Ч р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜"
    },
    "pa": {  # Punjabi
        "title": "ЁЯМ▒ рикрйМрижри╛ ри░рйЛриЧ рикриЫри╛риг ри╕ри┐ри╕риЯрио",
        "home_title": "AI-ри╕рй░риЪри╛ри▓ри┐рид рикрйМрижри╛ ри░рйЛриЧ риЦрйЛриЬ",
        "welcome": "риЬрйА риЖриЗриЖриВ риирйВрй░!",
        "description": "риЗри╣ ри╕ри┐ри╕риЯрио **AI-ри╕рй░риЪри╛ри▓ри┐рид риЪри┐рй▒ридри░ ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг** рижрйА ри╡ри░ридрйЛриВ риХри░риХрйЗ рикрйМрижри┐риЖриВ рижрйАриЖриВ римри┐риори╛ри░рйАриЖриВ рижрйА рикриЫри╛риг риХри░рии ри╡ри┐рй▒риЪ риорижриж риХри░рижри╛ ри╣рйИ.",
        "how_it_works": "### риЗри╣ риХри┐ри╡рйЗриВ риХрй░рио риХри░рижри╛ ри╣рйИ:",
        "step1": "1. **риЗрй▒риХ риЪри┐рй▒ридри░ риЕрй▒рикри▓рйЛриб риХри░рйЛ**: ри░рйЛриЧ рикриЫри╛риг рикрй░риирйЗ 'ридрйЗ риЬри╛риУ.",
        "step2": "2. **AI рикрйНри░риХри┐ри░ри┐риЖ**: риори╛рибри▓ ри╕рй░ринри╛ри╡рйА ри░рйЛриЧри╛риВ рижрйА рикриЫри╛риг риХри░рижри╛ ри╣рйИ.",
        "step3": "3. **рииридрйАриЬрйЗ**: ри╕ри╣рйА ри░рйЛриЧ ринри╡ри┐рй▒риЦримри╛ригрйА ридрйБри░рй░рид рикрйНри░ри╛рикрид риХри░рйЛ!",
        "start": "ЁЯСЙ *ри░рйЛриЧ рикриЫри╛риг риЯрйИрим 'ридрйЗ риХри▓ри┐рй▒риХ риХри░риХрйЗ ри╕ри╝рйБри░рйВ риХри░рйЛ!*",
        "about_title": "ЁЯУЬ риЗри╕ рикрйНри░рйЛриЬрйИриХриЯ римри╛ри░рйЗ",
        "developed_by": "рижрйБриЖри░ри╛ ри╡ри┐риХри╕ри┐рид:",
        "team": "- **ри╕ри░ри▓ ри╕ри┐рй░риШри▓**\n- **риЕрижри┐ридрйА ри╕ри╝ри┐рй░рибри╛рибриХри░**\n- **риУрио ри░ри╛риЬ**\n- **ридри░рикри┐ридри╛ риХри░риирио**\n- **рикрйНри░ри╛риВриЬри▓ риХри░рии**",
        "recognition_title": "ЁЯФм ри░рйЛриЧ рикриЫри╛риг",
        "upload_text": "ЁЯУ╕ риЗрй▒риХ рикрйМрижрйЗ рижрйА рикрй▒ридрйА рижрйА риЪри┐рй▒ридри░ риЕрй▒рикри▓рйЛриб риХри░рйЛ:",
        "predict_button": "ЁЯФН ри░рйЛриЧ рижрйА ринри╡ри┐рй▒риЦримри╛ригрйА риХри░рйЛ",
        "analyzing": "ЁЯФД риЪри┐рй▒ридри░ рижри╛ ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг риХрйАридри╛ риЬри╛ ри░ри┐ри╣ри╛ ри╣рйИ...",
        "result_disease": "тЬЕ ри░рйЛриЧ рижрйА рикриЫри╛риг:",
        "result_plant": "ЁЯНГ рикрйМрижрйЗ рижрйА риХри┐ри╕рио:",
        "select_page": "рикрй░риири╛ риЪрйБригрйЛ",
        "home": "ри╣рйЛрио",
        "about": "римри╛ри░рйЗ",
        "disease_recognition": "ри░рйЛриЧ рикриЫри╛риг"
    },
    "or": {  # Odia
        "title": "ЁЯМ▒ рмЙрмжрнНрмнрм┐рмж рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ рмкрнНрм░рмгрм╛рм│рнА",
        "home_title": "AI-рмЪрм╛рм│рм┐рмд рмЙрмжрнНрмнрм┐рмж рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ",
        "welcome": "рм╕рнНрн▒рм╛рмЧрмд!",
        "description": "рмПрм╣рм┐ рмкрнНрм░рмгрм╛рм│рнА **AI-рмЪрм╛рм│рм┐рмд рмкрнНрм░рмдрм┐рмЫрммрм┐ рммрм┐рм╢рнНрм│рнЗрм╖рмг** рммрнНрнЯрммрм╣рм╛рм░ рмХрм░рм┐ рмЙрмжрнНрмнрм┐рмж рм░рнЛрмЧрмЧрнБрмбрм╝рм┐рмХрнБ рмЪрм┐рм╣рнНрмирмЯ рмХрм░рм┐рммрм╛рм░рнЗ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рнЗред",
        "how_it_works": "### рмПрм╣рм╛ рмХрм┐рмкрм░рм┐ рмХрм╛рмо рмХрм░рнЗ:",
        "step1": "1. **рмПрмХ рмкрнНрм░рмдрм┐рмЫрммрм┐ рмЕрмкрм▓рнЛрмбрнН рмХрм░рмирнНрмдрнБ**: рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ рмкрнГрм╖рнНрмарм╛рмХрнБ рмпрм╛рмЖрмирнНрмдрнБред",
        "step2": "2. **AI рмкрнНрм░рмХрнНрм░рм┐рнЯрм╛рмХрм░рмг**: рмормбрнЗрм▓ рм╕рморнНрмнрм╛рммрнНрнЯ рм░рнЛрмЧрмЧрнБрмбрм╝рм┐рмХрнБ рмЪрм┐рм╣рнНрмирмЯ рмХрм░рнЗред",
        "step3": "3. **рмлрм│рм╛рмлрм│**: рм╕рмарм┐рмХрнН рм░рнЛрмЧ рмкрнВрм░рнНрммрм╛рмирнБрморм╛рми рмдрнБрм░рмирнНрмд рмкрнНрм░рм╛рмкрнНрмд рмХрм░рмирнНрмдрнБ!",
        "start": "ЁЯСЙ *рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ рмЯрнНрнЯрм╛рммрнН рмЙрмкрм░рнЗ рмХрнНрм▓рм┐рмХрнН рмХрм░рм┐ рмЖрм░рморнНрмн рмХрм░рмирнНрмдрнБ!*",
        "about_title": "ЁЯУЬ рмПрм╣рм┐ рмкрнНрм░рмХрм│рнНрмк рммрм┐рм╖рнЯрм░рнЗ",
        "developed_by": "рмжрнНрн▒рм╛рм░рм╛ рммрм┐рмХрм╢рм┐рмд:",
        "team": "- **рм╕рм░рм│ рм╕рм┐рмВрм╣рм▓**\n- **рмЕрмжрм┐рмдрм┐ рм╢рм┐рмгрнНрмбрм╛рмбрмХрм░**\n- **рмУрмо рм░рм╛рмЬ**\n- **рмдрм░рнНрмкрм┐рмдрм╛ рмХрм░рнНрмгрнНрмгрмо**\n- **рмкрнНрм░рм╛рмЮрнНрмЬрм▓ рмХрм░рмг**",
        "recognition_title": "ЁЯФм рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ",
        "upload_text": "ЁЯУ╕ рмПрмХ рмЙрмжрнНрмнрм┐рмж рмкрмдрнНрм░ рмкрнНрм░рмдрм┐рмЫрммрм┐ рмЕрмкрм▓рнЛрмбрнН рмХрм░рмирнНрмдрнБ:",
        "predict_button": "ЁЯФН рм░рнЛрмЧ рмкрнВрм░рнНрммрм╛рмирнБрморм╛рми рмХрм░рмирнНрмдрнБ",
        "analyzing": "ЁЯФД рмкрнНрм░рмдрм┐рмЫрммрм┐ рммрм┐рм╢рнНрм│рнЗрм╖рмг рмХрм░рнБрмЫрм┐...",
        "result_disease": "тЬЕ рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ рм╣рнЛрмЗрмЫрм┐:",
        "result_plant": "ЁЯНГ рмЙрмжрнНрмнрм┐рмж рмкрнНрм░рмХрм╛рм░:",
        "select_page": "рмкрнГрм╖рнНрмарм╛ рмЪрнЯрми рмХрм░рмирнНрмдрнБ",
        "home": "рмШрм░",
        "about": "рммрм┐рм╖рнЯрм░рнЗ",
        "disease_recognition": "рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ"
    }
}

# Language display names
LANGUAGE_NAMES = {
    "en": "English",
    "hi": "рд╣рд┐рдиреНрджреА (Hindi)",
    "bn": "ржмрж╛ржВрж▓рж╛ (Bengali)",
    "ta": "родрооро┐ро┤рпН (Tamil)",
    "te": "р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)",
    "mr": "рдорд░рд╛рдареА (Marathi)",
    "gu": "ркЧрлБркЬрк░рк╛ркдрлА (Gujarati)",
    "kn": "р▓Хр▓ир│Нр▓ир▓б (Kannada)",
    "ml": "р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)",
    "pa": "рикрй░риЬри╛римрйА (Punjabi)",
    "or": "рмУрмбрм╝рм┐рмЖ (Odia)"
}

# Initialize language
if 'language' not in st.session_state:
    st.session_state.language = 'en'

# Apply custom CSS
def apply_css():
    st.markdown("""
    <style>
        :root {
            --primary: #4CAF50;
            --secondary: #6dcf6d;
            --accent: #FFD700;
            --dark: #1a1a2e;
            --light: #f8f9fa;
            --success: #28a745;
            --info: #17a2b8;
            --warning: #ffc107;
            --danger: #dc3545;
        }
        
        /* Full page gradient background with animated particles */
        .stApp {
            background: linear-gradient(135deg, #f5f9f5 0%, #e3f2e3 100%);
            background-attachment: fixed;
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }
        
        /* Animated floating particles */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
        }
        
        .particle {
            position: absolute;
            background: radial-gradient(circle, var(--primary) 0%, rgba(76, 175, 80, 0) 70%);
            border-radius: 50%;
            opacity: 0.3;
            animation: floatParticle linear infinite;
        }
        
        @keyframes floatParticle {
            0% {
                transform: translateY(0) translateX(0);
                opacity: 0;
            }
            10% {
                opacity: 0.3;
            }
            90% {
                opacity: 0.3;
            }
            100% {
                transform: translateY(-100vh) translateX(20px);
                opacity: 0;
            }
        }
        
        /* Vibrant header with animation */
        .header {
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            padding: 1.5rem;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            position: relative;
            overflow: hidden;
        }
        
        .header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(
                to bottom right,
                rgba(255, 255, 255, 0.3) 0%,
                rgba(255, 255, 255, 0) 60%
            );
            transform: rotate(30deg);
            animation: shine 6s infinite;
        }
        
        @keyframes shine {
            0% { left: -100%; }
            20% { left: 100%; }
            100% { left: 100%; }
        }
        
        /* Glowing title with gradient text */
        .title {
            font-size: 3rem;
            font-weight: 800;
            background: linear-gradient(to right, #4CAF50, #2E7D32, #FFD700);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-align: center;
            margin: 1rem 0 2rem;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
            animation: glow 2s ease-in-out infinite alternate;
            position: relative;
            display: inline-block;
            padding: 0 1rem;
        }
        
        .title::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 100%;
            height: 3px;
            background: linear-gradient(to right, #4CAF50, #FFD700);
            border-radius: 3px;
            transform: scaleX(0);
            transform-origin: left;
            transition: transform 0.3s ease;
        }
        
        .title:hover::after {
            transform: scaleX(1);
        }
        
        @keyframes glow {
            from {
                text-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
            }
            to {
                text-shadow: 0 0 15px rgba(76, 175, 80, 0.8), 0 0 20px rgba(255, 215, 0, 0.6);
            }
        }
        
        /* Premium 3D cards with hover effects */
        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 2.5rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            margin-bottom: 2.5rem;
            border: none;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255,255,255,0.3);
        }
        
        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(to right, var(--primary), var(--accent));
        }
        
        .card:hover {
            transform: translateY(-10px) scale(1.02);
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
        }
        
        .card:hover::before {
            animation: rainbow 2s linear infinite;
        }
        
        @keyframes rainbow {
            0% { background-position: 0% 50%; }
            100% { background-position: 100% 50%; }
        }
        
        /* Animated buttons with ripple effect */
        .stButton>button {
            background: linear-gradient(145deg, var(--primary), var(--secondary));
            color: white;
            font-size: 1.1rem;
            font-weight: 600;
            padding: 0.9rem 2rem;
            border-radius: 50px;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.4);
            border: none;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            z-index: 1;
            letter-spacing: 0.5px;
            text-transform: uppercase;
        }
        
        .stButton>button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.6);
            background: linear-gradient(145deg, var(--secondary), var(--primary));
        }
        
        .stButton>button:active {
            transform: translateY(1px);
        }
        
        .stButton>button::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 5px;
            height: 5px;
            background: rgba(255, 255, 255, 0.5);
            opacity: 0;
            border-radius: 100%;
            transform: scale(1, 1) translate(-50%);
            transform-origin: 50% 50%;
        }
        
        .stButton>button:focus:not(:active)::after {
            animation: ripple 1s ease-out;
        }
        
        @keyframes ripple {
            0% {
                transform: scale(0, 0);
                opacity: 0.5;
            }
            20% {
                transform: scale(25, 25);
                opacity: 0.3;
            }
            100% {
                opacity: 0;
                transform: scale(40, 40);
            }
        }
        
        /* Enhanced sidebar with glass morphism */
        .sidebar .sidebar-content {
            background: rgba(255, 255, 255, 0.9) !important;
            backdrop-filter: blur(10px);
            box-shadow: 5px 0 15px rgba(0,0,0,0.05);
            border-right: 1px solid rgba(255,255,255,0.3);
        }
        
        /* Language selector styling */
        .language-selector {
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: rgba(255,255,255,0.8);
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        /* File uploader styling */
        .stFileUploader>div>div>div>div {
            border: 2px dashed var(--primary) !important;
            border-radius: 15px !important;
            padding: 2rem !important;
            background: rgba(255,255,255,0.7) !important;
            transition: all 0.3s ease !important;
        }
        
        .stFileUploader>div>div>div>div:hover {
            border-color: var(--accent) !important;
            background: rgba(255,255,255,0.9) !important;
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .title {
                font-size: 2.2rem;
            }
            .card {
                padding: 1.5rem;
            }
            .header {
                padding: 1rem;
            }
        }
        
        /* Floating leaves animation */
        .leaf {
            position: fixed;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%234CAF50"><path d="M17 8C8 10 5.9 16.8 3 22c5-3 10-5 14-7-3-2-5-5-5-7 0-3 3-6 5-6s5 3 5 6c0 2-2 5-5 7 4 2 9 4 14 7-2.9-5.2-5-12-14-14-1.5 2.5-1.5 5.5-1 8z"/></svg>');
            background-size: cover;
            opacity: 0.6;
            animation: falling linear infinite;
            z-index: -1;
            pointer-events: none;
        }
        
        @keyframes falling {
            0% {
                transform: translate(0, -10vh) rotate(0deg);
                opacity: 0;
            }
            10% {
                opacity: 0.6;
            }
            90% {
                opacity: 0.6;
            }
            100% {
                transform: translate(calc(var(--random-x) * 100vw), 100vh) rotate(360deg);
                opacity: 0;
            }
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(0,0,0,0.05);
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: linear-gradient(var(--primary), var(--secondary));
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: var(--accent);
        }
    </style>
    
    <!-- Floating particles animation -->
    <script>
        function createParticles() {
            const container = document.createElement('div');
            container.className = 'particles';
            document.body.appendChild(container);
            
            const particleCount = 20;
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                
                const size = Math.random() * 100 + 50;
                const duration = Math.random() * 20 + 10;
                const delay = Math.random() * 10;
                const left = Math.random() * 100;
                
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                particle.style.left = `${left}%`;
                particle.style.top = `${Math.random() * 100 + 100}%`;
                particle.style.animationDuration = `${duration}s`;
                particle.style.animationDelay = `${delay}s`;
                
                container.appendChild(particle);
            }
        }
        
        window.addEventListener('load', createParticles);
    </script>
    
    <!-- Floating leaves animation -->
    <script>
        function createLeaves() {
            const container = document.createElement('div');
            container.className = 'leaves-container';
            document.body.appendChild(container);
            
            const leafCount = 15;
            for (let i = 0; i < leafCount; i++) {
                const leaf = document.createElement('div');
                leaf.className = 'leaf';
                
                const size = Math.random() * 20 + 10;
                const duration = Math.random() * 10 + 10;
                const delay = Math.random() * 10;
                const left = Math.random() * 100;
                
                leaf.style.width = `${size}px`;
                leaf.style.height = `${size}px`;
                leaf.style.left = `${left}%`;
                leaf.style.animationDuration = `${duration}s`;
                leaf.style.animationDelay = `${delay}s`;
                leaf.style.setProperty('--random-x', Math.random() * 0.4 - 0.2);
                
                container.appendChild(leaf);
            }
        }
        
        window.addEventListener('load', createLeaves);
    </script>
    """, unsafe_allow_html=True)



# Language selector
def language_selector():
    st.sidebar.markdown("### ЁЯМР Select Language")
    lang = st.sidebar.selectbox(
        "", 
        options=list(TRANSLATIONS.keys()),
        index=list(TRANSLATIONS.keys()).index(st.session_state.language),
        format_func=lambda x: LANGUAGE_NAMES[x]
    )
    st.session_state.language = lang

# Sidebar Navigation
language_selector()
st.sidebar.title("ЁЯМ┐ Plant Disease Recognition")
t = TRANSLATIONS[st.session_state.language]
app_mode = st.sidebar.radio(
    t["select_page"], 
    [f"ЁЯПа {t['home']}", f"ЁЯУЦ {t['about']}", f"ЁЯжа {t['disease_recognition']}"]
)

# Get current language translations
t = TRANSLATIONS[st.session_state.language]

# Home Page
if app_mode == f"ЁЯПа {t['home']}":
    st.markdown(f"<div class='title'>{t['title']}</div>", unsafe_allow_html=True)
    
    with st.container():
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.image("home_page.jpeg", caption=t['home_title'], use_column_width=True)
        st.markdown(f"""
        ## {t['welcome']}
        {t['description']} ЁЯМНЁЯМ┐
        
        {t['how_it_works']}
        {t['step1']}
        {t['step2']}
        {t['step3']} ЁЯЪА
        
        {t['start']}
        """)
        st.markdown("</div>", unsafe_allow_html=True)

# About Page
elif app_mode == f"ЁЯУЦ {t['about']}":
    st.title(t['about_title'])
    
    with st.container():
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.markdown(f"""
        {t['developed_by']}
        {t['team']}
        
        *VIT Open Source Initiative.*
        """)
        st.markdown("</div>", unsafe_allow_html=True)

# Disease Recognition Page
elif app_mode == f"ЁЯжа {t['disease_recognition']}":
    st.markdown(f"<div class='title'>{t['recognition_title']}</div>", unsafe_allow_html=True)
    
    with st.container():
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        plant_image = st.file_uploader(t['upload_text'], type=["jpg", "png", "jpeg"])

        if plant_image is not None:
            st.image(plant_image, caption="Uploaded Image", use_column_width=True)
            file_bytes = np.asarray(bytearray(plant_image.read()), dtype=np.uint8)
            opencv_image = cv2.imdecode(file_bytes, 1)
            opencv_image = cv2.resize(opencv_image, (256, 256))
            opencv_image.shape = (1, 256, 256, 3)

        if st.button(t['predict_button']):
            with st.spinner(t['analyzing']):
                time.sleep(2)  # Simulated delay
                Y_pred = model.predict(opencv_image)
                result = CLASS_NAMES[np.argmax(Y_pred)]

            st.success(f"{t['result_disease']} **{result.split('-')[1]}**")
            st.info(f"{t['result_plant']} **{result.split('-')[0]}**")
            
        st.markdown("</div>", unsafe_allow_html=True)